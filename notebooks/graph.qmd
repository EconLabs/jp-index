---
title: "Developing graphs"
format:
  html:
    code-fold: true
jupyter: python3
---

# Developing graphs index

```{python}
import os 
os.chdir('..')
```

```{python}
def format_money(val):
    abs_val = abs(val)
    sign = "-" if val < 0 else ""

    if abs_val >= 1e9:
        return f"{sign}${abs_val / 1e9:.1f}B"
    elif abs_val >= 1e6:
        return f"{sign}${abs_val / 1e6:.1f}M"
    elif abs_val >= 1e3:
        return f"{sign}${abs_val / 1e3:.1f}K"
    else:
        return f"{sign}${abs_val:.0f}"
```

```{python}
def filter_data(year, quarter, month, type, agency):
    df = conn.sql(f"SELECT * FROM AwardTable;").pl()

    month_map = {
        1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun', 
        7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec', 
    }
    months = list(month_map.values())
    
    df = df.with_columns([
        pl.col("action_date").str.strptime(pl.Date, "%Y-%m-%d").alias("parsed_date"),
        ((pl.col("action_date").str.strptime(pl.Date, "%Y-%m-%d").dt.month()).alias("month")),
        ((pl.col("action_date").str.strptime(pl.Date, "%Y-%m-%d").dt.year()).alias("year"))
    ])
    df = df.with_columns(
        pl.col("month").cast(pl.String).replace(month_map).alias("month_name").cast(pl.String),
        (pl.col("year") + (pl.col("month") > 6).cast(pl.Int32)).alias("pr_fiscal_year"),
        pl.col('awarding_agency_name').str.to_lowercase()
    )
    agency = agency.lower()
    type = type.lower()

    agg_expr = "federal_action_obligation"

    if agency:
        df = df.filter(pl.col("awarding_agency_name") == agency)

        match type:
            case 'fiscal':
                grouped_df = df.with_columns(
                    (pl.col("pr_fiscal_year")).cast(pl.String).alias("time_period")
                )
                grouped_df = grouped_df.group_by(['time_period', 'awarding_agency_name']).agg(pl.col(agg_expr).sum())
            case 'year':
                grouped_df = df.with_columns(
                    (pl.col("year")).cast(pl.String).alias("time_period")
                )
                grouped_df = grouped_df.group_by(['time_period', 'awarding_agency_name']).agg(pl.col(agg_expr).sum())
            case 'quarter':
                quarter_expr = (
                    pl.when(pl.col("month").is_in([1, 2, 3])).then(pl.lit("q1"))
                    .when(pl.col("month").is_in([4, 5, 6])).then(pl.lit("q2"))
                    .when(pl.col("month").is_in([7, 8, 9])).then(pl.lit("q3"))
                    .when(pl.col("month").is_in([10, 11, 12])).then(pl.lit("q4"))
                    .otherwise(pl.lit("q?"))
                )
                grouped_df = df.with_columns(
                    (pl.col("year").cast(pl.String) + quarter_expr).alias("time_period")
                )
                grouped_df = grouped_df.group_by(['time_period', 'awarding_agency_name']).agg(pl.col(agg_expr).sum())
            case 'month':
                results = pl.DataFrame(schema={
                    "month_name": pl.String,
                    "awarding_agency_name": pl.String,
                    "year": pl.Int32,
                    "federal_action_obligation": pl.Float32,
                    "time_period": pl.String,
                })
                months = pl.DataFrame({'month_name': months}).select([
                    pl.col("month_name").cast(pl.String)
                ])
                for year in df.select(pl.col("year")).unique().to_series().to_list():
                    df_year = df.filter(pl.col("year") == year)
                    df_year = months.join(df_year, on="month_name", how="outer")
                    df_year = df_year.select(["month_name", "federal_action_obligation", "awarding_agency_name", "year"]).with_columns(
                        pl.col('year').fill_null(year),
                        pl.col("federal_action_obligation").fill_null(0),
                        pl.col('awarding_agency_name').fill_null(agency)
                    )
                    df_year = df_year.group_by(['month_name', 'awarding_agency_name', 'year']).agg(pl.col(agg_expr).sum())
                    df_year = df_year.with_columns(
                        (pl.col("year").cast(pl.Utf8) + pl.col("month_name")).alias("time_period")
                    )
                    results = pl.concat([results, df_year])
                grouped_df = results
                grouped_df = grouped_df.group_by(['awarding_agency_name', 'time_period']).agg(pl.col(agg_expr).sum())
                grouped_df = grouped_df.with_columns(
                    pl.col("time_period").str.strptime(pl.Date, "%Y%b", strict=False).dt.strftime("%Y-%m").alias("parsed_period")
                ).sort("parsed_period")
    else:
        match type:
            case 'fiscal':
                df_filtered = df.filter(pl.col("pr_fiscal_year") == year)
            case 'year':
                df_filtered = df.filter(pl.col("year") == year)
            case 'month':
                df_filtered = df.filter(pl.col("month") == month)
            case 'quarter':
                quarter_to_calendar_month = {
                    1: [1, 2, 3], 
                    2: [4, 5, 6], 
                    3: [7, 8, 9],
                    4: [10, 11, 12]
                }
                df_filtered = df.filter(pl.col("month").is_in(quarter_to_calendar_month[quarter]))
        grouped_df = df_filtered.group_by([category]).agg(pl.col(agg_expr).sum())

    return grouped_df
```

```{python}
import pandas as pd
import altair as alt
from src.models import get_conn
from src.data.data_process import DataIndex
import polars as pl
from datetime import datetime
import calendar
from dateutil.relativedelta import relativedelta

db_path = os.path.join(os.path.dirname(__file__), "..", "data.ddb")
db_path = os.path.abspath(db_path)

conn = get_conn(db_path)

fiscal_year = 2009
fiscal_quarter = 2
fiscal_month = 3
category = 'awarding_agency_name'
type = 'month'
secter = 'Department of Defense'

agg_expr = 'federal_action_obligation'
df = filter_data(fiscal_year, fiscal_quarter, fiscal_month, type, secter)
grouped_pd = df.to_pandas()
grouped_pd['formatted_text'] = grouped_pd[agg_expr].apply(format_money)

if not secter:
    chart = alt.Chart(grouped_pd).mark_bar().encode(
        y=alt.Y(f'{category}:N', title=None, sort='-x'),
        x=alt.X(
            f'{agg_expr}:Q', 
            title=None,
            scale=alt.Scale(type='sqrt'),
            axis=None
        )
    )

    text = alt.Chart(grouped_pd).mark_text(
        baseline='middle',
        align=alt.ExprRef("datum.federal_action_obligation < 0 ? 'right' : 'left'"),
        dx=alt.ExprRef("datum.federal_action_obligation < 0 ? -3 : 3")
    ).encode(
        y=alt.Y(f'{category}:N', sort='-x'),
        x=alt.X(f'{agg_expr}:Q'),
        text='formatted_text:N',
    )
    data_chart = chart + text

else:
    if type == 'month':
        sort_expr = grouped_pd["parsed_period"].tolist()
    else:
        sort_expr = 'x'

    num_points = len(grouped_pd['time_period'].unique())
    chart_width = max(600, num_points * 15)

    data_chart = alt.Chart(grouped_pd).mark_line().encode(
        x=alt.X('time_period:O', title=None, sort=sort_expr),
        y=alt.Y('federal_action_obligation:Q', title=None)
    ).properties(width=chart_width)

data_chart.display()
```