---
title: "Developing consummer index"
format:
  html:
    code-fold: true
jupyter: python3
---

# Developing a consumer price index

```{python}
import os 
os.chdir('..')
```

```{python}
import polars
from src.data.data_process import DataIndex
import ibis

di = DataIndex()
ibis.options.interactive = True
```

```{python}
di.process_activity()
```

```{python}
pl.read_parquet("data/processed/consumer.parquet").columns
```

```{python}
df = pl.read_excel('data/raw/consumer.xls', sheet_id=1)
names = df.head(1).to_dicts().pop()
names = dict((k, v.lower().replace(' ', '_').replace('á', 'a').replace('é', 'e').replace('í', 'i').replace('ó', 'o').replace('ú', 'u').replace('ñ', 'n')) for k, v in names.items())
df = df.rename(names)
df = df.tail(-2).head(-1)
df = df.with_columns(pl.col('descripcion').str.to_lowercase())
df = df.with_columns((
    pl.when(pl.col('descripcion').str.contains("ene")).then(pl.col('descripcion').str.replace("ene", "01").str.split_exact('-', 1).struct.rename_fields(['month', 'year']).alias('date'))
      .when(pl.col('descripcion').str.contains("feb")).then(pl.col('descripcion').str.replace("feb", "02").str.split_exact('-', 1).struct.rename_fields(['month', 'year']).alias('date'))
      .when(pl.col('descripcion').str.contains("mar")).then(pl.col('descripcion').str.replace("mar", "03").str.split_exact('-', 1).struct.rename_fields(['month', 'year']).alias('date'))
      .when(pl.col('descripcion').str.contains("abr")).then(pl.col('descripcion').str.replace("abr", "04").str.split_exact('-', 1).struct.rename_fields(['month', 'year']).alias('date'))
      .when(pl.col('descripcion').str.contains("may")).then(pl.col('descripcion').str.replace("may", "05").str.split_exact('-', 1).struct.rename_fields(['month', 'year']).alias('date'))
      .when(pl.col('descripcion').str.contains("jun")).then(pl.col('descripcion').str.replace("jun", "06").str.split_exact('-', 1).struct.rename_fields(['month', 'year']).alias('date'))
      .when(pl.col('descripcion').str.contains("jul")).then(pl.col('descripcion').str.replace("jul", "07").str.split_exact('-', 1).struct.rename_fields(['month', 'year']).alias('date'))
      .when(pl.col('descripcion').str.contains("ago")).then(pl.col('descripcion').str.replace("ago", "08").str.split_exact('-', 1).struct.rename_fields(['month', 'year']).alias('date'))
      .when(pl.col('descripcion').str.contains("sep")).then(pl.col('descripcion').str.replace("sep", "09").str.split_exact('-', 1).struct.rename_fields(['month', 'year']).alias('date'))
      .when(pl.col('descripcion').str.contains("oct")).then(pl.col('descripcion').str.replace("oct", "10").str.split_exact('-', 1).struct.rename_fields(['month', 'year']).alias('date'))
      .when(pl.col('descripcion').str.contains("nov")).then(pl.col('descripcion').str.replace("nov", "11").str.split_exact('-', 1).struct.rename_fields(['month', 'year']).alias('date'))
      .when(pl.col('descripcion').str.contains("dic")).then(pl.col('descripcion').str.replace("dic", "12").str.split_exact('-', 1).struct.rename_fields(['month', 'year']).alias('date'))
      .otherwise(pl.col('descripcion').str.split_exact('-', 1).struct.rename_fields(['year', 'month']).alias('date'))
  )).unnest("date")
df = df.with_columns((
  pl.when((pl.col("year").str.len_chars() == 2) & (pl.col("year").str.strip_chars().cast(pl.Int32) < 80)).then(pl.col("year").str.strip_chars().cast(pl.Int32) + 2000)
    .when((pl.col("year").str.len_chars() == 2) & (pl.col("year").str.strip_chars().cast(pl.Int32) >= 80)).then(pl.col("year").str.strip_chars().cast(pl.Int32) + 1900)
    .otherwise(pl.col("year").str.strip_chars().cast(pl.Int32)).alias("year")
))
df = df.with_columns(date=pl.date(pl.col('year').cast(pl.String), pl.col('month'), 1))
df = df.drop(['year', 'month', 'descripcion'])
df = df.with_columns(pl.all().exclude("date").cast(pl.Float64))
df
```

['ropa',
 'ropa_de_hombres',
 'ropa_de_ninos',
 'ropa_de_mujer',
 'ropa_de_ninas',
 'calzado',
 'ropa_de_bebe_y_de_infantes',
 'relojes_y_joyeria',
 'educacion_y_comunicacion',
 'materiales_educativos',
 'matricula_mensualidades_y_cuido__de_ninos',
 'correo_y_otros_servicios_postales',
 'telefonos',
 'otros_servicios_informativos',
 'alimentos_y_bebidas',
 'cereales_y_productos_de_cereales',
 'productos_horneados',
 'carne_de_res',
 'carne_de_cerdo',
 'otras_carnes',
 'carne_de_aves',
 'pescados_y_mariscos',
 'huevos',
 'productos_lacteos_y_relacionados',
 'frutas_frescas',
 'vegetales_frescos',
 'frutas_y_vegetales_elaborados',
 'jugos_de_frutas_y_vegetales_y_bebidas_sin_alcohol',
 'material_para_bebidas_incluyendo_cafe_y_te',
 'azucares_y_endulzadores',
 'grasas__aceites_y_aderezos',
 'otros_alimentos',
 'alimentos_para_consumo_fuera_del_hogar',
 'bebidas_alcoholicas_para_consumo_en_el_hogar',
 'bebidas_alcoholicas_para_consumo_fuera_del_hogar',
 'otros_articulos_y_servicios',
 'tabaco_y_productos_relacionados',
 'productos_para_el_cuidado_personal',
 'servicios_cuidado_personal',
 'servicios_personales_miscelaneos',
 'otros_gastos',
 'alojamiento',
 'alquiler_de_la_residencia_primaria',
 'alojamiento_fuera_del_hogar',
 'alquiler_equivalente_de_la_vivienda_poseida',
 'seguros_de_la_vivienda_o_de_inquilinos_',
 'combustible_para_la_vivienda',
 'electricidad',
 'agua_alcantarillados_y_limpieza_de_pozos_septicos',
 'cortinas_alfombras_y_otros_similares',
 'mobiliario',
 'enseres_del_hogar',
 'otros_equipos_del_hogar',
 'herramientas_equipo_para_uso_exterior_y_articulos_de_ferreteria',
 'articulos_del_hogar',
 'servicios_para_el_hogar',
 'cuidado_medico',
 'medicinas_recetadas_y_vacunas',
 'medicinas_no_recetadas_y_equipo_medico',
 'servicios_profesionales',
 'hospitales_y_servicios_relacionados',
 'seguros_de_salud',
 'entretenimiento',
 'video_y_audio',
 'mascotas_productos_y_servicios_para_mascotas',
 'productos_deportivos',
 'fotografia',
 'otros_productos_para_entretenimiento',
 'servicios_para_el_entretenimiento',
 'libros_y_revistas',
 'transporte*',
 'vehiculos-compra_y_alquiler',
 'combustible_para_motores_y_otros',
 'piezas_y_equipos_para_vehiculos_de_motor',
 'mantenimiento_y_reparacion_de_vehiculos',
 'seguros_para_vehiculos_de_motor',
 'tarifas_para_vehiculos_de_motor',
 'transporte_publico',
 'todos_los_articulos_y_servicios',
 'date',
 'id']

